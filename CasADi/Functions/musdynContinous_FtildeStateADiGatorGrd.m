% This code was generated using ADiGator version 1.3
% ©2010-2014 Matthew J. Weinstein and Anil V. Rao
% ADiGator may be obtained at https://sourceforge.net/projects/adigator/ 
% Contact: mweinstein@ufl.edu
% Bugs/suggestions may be reported to the sourceforge forums
%                    DISCLAIMER
% ADiGator is a general-purpose software distributed under the GNU General
% Public License version 3.0. While the software is distributed with the
% hope that it will be useful, both the software and generated code are
% provided 'AS IS' with NO WARRANTIES OF ANY KIND and no merchantability
% or fitness for any purpose or application.

function phaseout = musdynContinous_FtildeStateADiGatorGrd(input)
global ADiGator_musdynContinous_FtildeStateADiGatorGrd
if isempty(ADiGator_musdynContinous_FtildeStateADiGatorGrd); ADiGator_LoadData(); end
Gator1Data = ADiGator_musdynContinous_FtildeStateADiGatorGrd.musdynContinous_FtildeStateADiGatorGrd.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % Get input data
NMuscles = input.auxdata.NMuscles;
%User Line: NMuscles        = input.auxdata.NMuscles;
Ndof = input.auxdata.Ndof;
%User Line: Ndof            = input.auxdata.Ndof;
tauAct = input.auxdata.tauAct;
%User Line: tauAct          = input.auxdata.tauAct;
tauDeact = input.auxdata.tauDeact;
%User Line: tauDeact        = input.auxdata.tauDeact;
params = input.auxdata.params;
%User Line: params          = input.auxdata.params;
splinestruct    = input.auxdata.splinestruct;
%User Line: splinestruct    = input.auxdata.splinestruct;
numColPoints.f = size(input.phase.state.f,1);
%User Line: numColPoints    = size(input.phase.state,1);
%User Line: % Get controls
cada1f1 = 1:NMuscles;
e.dV = input.phase.control.dV(:,Gator1Data.Index6);
e.f = input.phase.control.f(:,cada1f1);
%User Line: e   = input.phase.control(:,1:NMuscles);
cada1f1 = NMuscles + 1;
cada1f2 = NMuscles + Ndof;
cada1f3 = cada1f1:cada1f2;
aT.dV = input.phase.control.dV(:,Gator1Data.Index7);
aT.f = input.phase.control.f(:,cada1f3);
%User Line: aT  = input.phase.control(:,NMuscles+1:NMuscles+Ndof);
cada1f1 = NMuscles + Ndof;
cada1f2 = cada1f1 + 1;
cada1f3 = size(input.phase.control.f,2);
cada1f4 = cada1f2:cada1f3;
cada1f5dV = input.phase.control.dV(:,Gator1Data.Index8);
cada1f5 = input.phase.control.f(:,cada1f4);
dFtilde.dV = 10.*cada1f5dV;
dFtilde.f = 10*cada1f5;
%User Line: dFtilde  = 10*input.phase.control(:,NMuscles+Ndof+1:end);
%User Line: % Get states
cada1f1 = 1:NMuscles;
a.dV = input.phase.state.dV(:,Gator1Data.Index9);
a.f = input.phase.state.f(:,cada1f1);
%User Line: a       = input.phase.state(:,1:NMuscles);
cada1f1 = NMuscles + 1;
cada1f2 = size(input.phase.state.f,2);
cada1f3 = cada1f1:cada1f2;
Ftilde.dV = input.phase.state.dV(:,Gator1Data.Index10);
Ftilde.f = input.phase.state.f(:,cada1f3);
%User Line: Ftilde = input.phase.state(:,NMuscles+1:end);
%User Line: % PATH CONSTRAINTS
%User Line: % Hill-equilibrium constraint
cadainput3_1.dV = a.dV; cadainput3_1.f = a.f;
%User Line: cadainput3_1 = a;
cadainput3_2.dV = Ftilde.dV; cadainput3_2.f = Ftilde.f;
%User Line: cadainput3_2 = Ftilde;
cadainput3_3.dV = dFtilde.dV; cadainput3_3.f = dFtilde.f;
%User Line: cadainput3_3 = dFtilde;
cadainput3_4 = splinestruct.LMT;
%User Line: cadainput3_4 = splinestruct.LMT;
cadainput3_5 = splinestruct.VMT;
%User Line: cadainput3_5 = splinestruct.VMT;
cadainput3_6 = params;
%User Line: cadainput3_6 = params;
cadainput3_7 = input.auxdata.Fvparam;
%User Line: cadainput3_7 = input.auxdata.Fvparam;
cadainput3_8 = input.auxdata.Fpparam;
%User Line: cadainput3_8 = input.auxdata.Fpparam;
cadainput3_9 = input.auxdata.Faparam;
%User Line: cadainput3_9 = input.auxdata.Faparam;
cadainput3_10 = input.auxdata.Atendon;
%User Line: cadainput3_10 = input.auxdata.Atendon;
[cadaoutput3_1,cadaoutput3_2] = ADiGator_ForceEquilibrium_FtildeState(cadainput3_1,cadainput3_2,cadainput3_3,cadainput3_4,cadainput3_5,cadainput3_6,cadainput3_7,cadainput3_8,cadainput3_9,cadainput3_10);
% Call to function: ForceEquilibrium_FtildeState
Hilldiff.dV = cadaoutput3_1.dV; Hilldiff.f = cadaoutput3_1.f;
%User Line: Hilldiff = cadaoutput3_1;
F.dV = cadaoutput3_2.dV; F.f = cadaoutput3_2.f;
%User Line: F = cadaoutput3_2;
%User Line: % Moments constraint
Topt.f =  150;
%User Line: Topt = 150;
Tdiff.f = zeros(numColPoints.f,Ndof);
%User Line: Tdiff = zeros(numColPoints,Ndof);
cadaforvar1.f = 1:Ndof;
%User Line: cadaforvar1 = 1:Ndof;
Tdiff.dV = zeros(size(Tdiff.f,1),30);
for cadaforcount1 = 1:3
    dof.f = cadaforvar1.f(:,cadaforcount1);
    %User Line: dof = cadaforvar1(:,cadaforcount1);
    T_exp.f = splinestruct.ID(:,dof.f);
    %User Line: T_exp=splinestruct.ID(:,dof);
    cada1f1 = dof.f - 1;
    cada1f3 = cada1f1*NMuscles;
    cada1f4 = cada1f3 + 1;
    cada1f5 = dof.f - 1;
    cada1f7 = cada1f5*NMuscles;
    cada1f8 = cada1f7 + NMuscles;
    cada1tempf1 = zeros(1,9);
    cada1tempf1(1:cada1f8-cada1f4+1) = cada1f4:cada1f8;
    index_sel.f = cada1tempf1;
    %User Line: index_sel=(dof-1)*(NMuscles)+1:(dof-1)*(NMuscles)+NMuscles;
    cada1f1 = splinestruct.MA(:,index_sel.f);
    cada1f2dV = cada1f1.*F.dV;
    cada1f2 = F.f.*cada1f1;
    cada1f3 = 9;
    cada1tf2 = ones(9,1);
    cada1tf1 = zeros(9,9);
    cada1tf1(Gator1Data.Index12) = cada1tf2(Gator1Data.Index11);
    cada1f4dV = cada1f2dV*cada1tf1;
    cada1f4 = sum(cada1f2,2);
    cada1td1 = zeros(size(aT.f,1),3);
    cada1td1(:,logical(Gator1Data.Index1(:,cadaforcount1))) = aT.dV(:,nonzeros(Gator1Data.Index1(:,cadaforcount1)));
    cada1f5dV = cada1td1;
    cada1f5 = aT.f(:,dof.f);
    cada1f7dV = Topt.f.*cada1f5dV;
    cada1f7 = Topt.f*cada1f5;
    cada1td1 = zeros(size(cada1f4dV,1),12);
    cada1td1(:,Gator1Data.Index13) = cada1f4dV;
    cada1td1(:,Gator1Data.Index14) = cada1td1(:,Gator1Data.Index14) + cada1f7dV;
    T_sim.dV = cada1td1;
    T_sim.f = cada1f4 + cada1f7;
    %User Line: T_sim=sum(F.*splinestruct.MA(:,index_sel),2) + Topt*aT(:,dof);
    cada1f1dV = -T_sim.dV;
    cada1f1 = T_exp.f - T_sim.f;
    Tdiff.dV(:,logical(Gator1Data.Index2(:,cadaforcount1))) = cada1f1dV(:,nonzeros(Gator1Data.Index2(:,cadaforcount1)));
    Tdiff.f(:,dof.f) = cada1f1;
    %User Line: Tdiff(:,dof) =  (T_exp-T_sim);
end
cada1td1 = zeros(size(Tdiff.f,1),57);
cada1td1(:,Gator1Data.Index15) = Tdiff.dV;
cada1td1(:,Gator1Data.Index16) = Hilldiff.dV;
phaseout.path.dV = cada1td1;
phaseout.path.f = [Tdiff.f Hilldiff.f];
%User Line: phaseout.path = [Tdiff Hilldiff];
%User Line: % DYNAMIC CONSTRAINTS
%User Line: % Activation dynamics
dadt.f = ones(numColPoints.f,NMuscles);
%User Line: dadt = ones(numColPoints,NMuscles);
cadaforvar2.f = 1:NMuscles;
%User Line: cadaforvar2 = 1:NMuscles;
dadt.dV = zeros(size(dadt.f,1),18);
for cadaforcount2 = 1:9
    m.f = cadaforvar2.f(:,cadaforcount2);
    %User Line: m = cadaforvar2(:,cadaforcount2);
    cada1td1 = zeros(size(e.f,1),9);
    cada1td1(:,logical(Gator1Data.Index3(:,cadaforcount2))) = e.dV(:,nonzeros(Gator1Data.Index3(:,cadaforcount2)));
    cadainput2_1.dV = cada1td1;
    cadainput2_1.f = e.f(:,m.f);
    %User Line: cadainput2_1 = e(:,m);
    cada1td1 = zeros(size(a.f,1),9);
    cada1td1(:,logical(Gator1Data.Index4(:,cadaforcount2))) = a.dV(:,nonzeros(Gator1Data.Index4(:,cadaforcount2)));
    cadainput2_2.dV = cada1td1;
    cadainput2_2.f = a.f(:,m.f);
    %User Line: cadainput2_2 = a(:,m);
    cadainput2_3.f = tauAct(m.f);
    %User Line: cadainput2_3 = tauAct(m);
    cadainput2_4.f = tauDeact(m.f);
    %User Line: cadainput2_4 = tauDeact(m);
    cadainput2_5 = input.auxdata.b;
    %User Line: cadainput2_5 = input.auxdata.b;
    cadaoutput2_1 = ADiGator_ActivationDynamics(cadainput2_1,cadainput2_2,cadainput2_3,cadainput2_4,cadainput2_5);
    % Call to function: ActivationDynamics
    dadt.dV(:,logical(Gator1Data.Index5(:,cadaforcount2))) = cadaoutput2_1.dV(:,nonzeros(Gator1Data.Index5(:,cadaforcount2)));
    dadt.f(:,m.f) = cadaoutput2_1.f;
    %User Line: dadt(:,m) = cadaoutput2_1;
end
%User Line: % Contraction dynamics is implicit
cada1td1 = zeros(size(dadt.f,1),27);
cada1td1(:,Gator1Data.Index17) = dadt.dV;
cada1td1(:,Gator1Data.Index18) = dFtilde.dV;
phaseout.dynamics.dV = cada1td1;
phaseout.dynamics.f = [dadt.f dFtilde.f];
%User Line: phaseout.dynamics = [dadt dFtilde];
%User Line: % OBJECTIVE FUNCTION
w1.f =  1000;
%User Line: w1 = 1000;
cada1f1dV = 2.*e.f.^(2-1).*e.dV;
cada1f1 = e.f.^2;
cada1tf2 = ones(9,1);
cada1tf1 = zeros(9,9);
cada1tf1(Gator1Data.Index20) = cada1tf2(Gator1Data.Index19);
cada1f2dV = cada1f1dV*cada1tf1;
cada1f2 = sum(cada1f1,2);
cada1f3dV = 2.*aT.f.^(2-1).*aT.dV;
cada1f3 = aT.f.^2;
cada1tf2 = ones(3,1);
cada1tf1 = zeros(3,3);
cada1tf1(Gator1Data.Index22) = cada1tf2(Gator1Data.Index21);
cada1f4dV = cada1f3dV*cada1tf1;
cada1f4 = sum(cada1f3,2);
cada1f5dV = w1.f.*cada1f4dV;
cada1f5 = w1.f*cada1f4;
cada1td1 = zeros(size(cada1f2dV,1),12);
cada1td1(:,Gator1Data.Index23) = cada1f2dV;
cada1td1(:,Gator1Data.Index24) = cada1td1(:,Gator1Data.Index24) + cada1f5dV;
phaseout.integrand.dV = cada1td1;
phaseout.integrand.f = cada1f2 + cada1f5;
%User Line: phaseout.integrand = sum(e.^2,2)+ w1.*sum(aT.^2,2);
phaseout.dynamics.dV_size = [18,40];
phaseout.dynamics.dV_location = Gator1Data.Index25;
phaseout.integrand.dV_size = 40;
phaseout.integrand.dV_location = Gator1Data.Index26;
phaseout.path.dV_size = [12,40];
phaseout.path.dV_location = Gator1Data.Index27;
end
function dadt = ADiGator_ActivationDynamics(e,a,tact,tdeact,b)
global ADiGator_musdynContinous_FtildeStateADiGatorGrd
Gator1Data = ADiGator_musdynContinous_FtildeStateADiGatorGrd.ADiGator_ActivationDynamics.Gator1Data;
% ADiGator Start Derivative Computations
cada1f2dV = 1.5.*a.dV;
cada1f2 = 1.5*a.f;
cada1f3dV = cada1f2dV;
cada1f3 = 0.5 + cada1f2;
cada1f5dV = tact.f.*cada1f3dV;
cada1f5 = tact.f*cada1f3;
cada1tf2 = cada1f5(:,Gator1Data.Index1);
d1.dV = -1./cada1tf2.^2.*cada1f5dV;
d1.f = 1./cada1f5;
%User Line: d1 = 1./(tact*(0.5+1.5*a));
cada1f2dV = 1.5.*a.dV;
cada1f2 = 1.5*a.f;
cada1f3dV = cada1f2dV;
cada1f3 = 0.5 + cada1f2;
d2.dV = cada1f3dV./tdeact.f;
d2.f = cada1f3/tdeact.f;
%User Line: d2 = (0.5+1.5*a)/tdeact;
cada1td1 = zeros(size(e.dV,1),18);
cada1td1(:,Gator1Data.Index2) = e.dV;
cada1td1(:,Gator1Data.Index3) = cada1td1(:,Gator1Data.Index3) + -a.dV;
cada1f1dV = cada1td1;
cada1f1 = e.f - a.f;
cada1f3dV = b.*cada1f1dV;
cada1f3 = b*cada1f1;
cada1tf1 = cada1f3(:,Gator1Data.Index4);
cada1f4dV = sech(cada1tf1).^2.*cada1f3dV;
cada1f4 = tanh(cada1f3);
f.dV = 0.5.*cada1f4dV;
f.f = 0.5*cada1f4;
%User Line: f = 0.5*tanh(b*(e-a));
cada1f1dV = f.dV;
cada1f1 = f.f + 0.5;
cada1tf1 = cada1f1(:,Gator1Data.Index5);
cada1td1 = zeros(size(d1.dV,1),18);
cada1td1(:,Gator1Data.Index6) = cada1tf1.*d1.dV;
cada1tf1 = d1.f(:,Gator1Data.Index7);
cada1td1 = cada1td1 + cada1tf1.*cada1f1dV;
cada1f2dV = cada1td1;
cada1f2 = d1.f.*cada1f1;
cada1f3dV = -f.dV;
cada1f3 = uminus(f.f);
cada1f4dV = cada1f3dV;
cada1f4 = cada1f3 + 0.5;
cada1tf1 = cada1f4(:,Gator1Data.Index8);
cada1td1 = zeros(size(d2.dV,1),18);
cada1td1(:,Gator1Data.Index9) = cada1tf1.*d2.dV;
cada1tf1 = d2.f(:,Gator1Data.Index10);
cada1td1 = cada1td1 + cada1tf1.*cada1f4dV;
cada1f5dV = cada1td1;
cada1f5 = d2.f.*cada1f4;
cada1td1 = cada1f2dV;
cada1td1 = cada1td1 + cada1f5dV;
cada1f6dV = cada1td1;
cada1f6 = cada1f2 + cada1f5;
cada1td1 = zeros(size(e.dV,1),18);
cada1td1(:,Gator1Data.Index11) = e.dV;
cada1td1(:,Gator1Data.Index12) = cada1td1(:,Gator1Data.Index12) + -a.dV;
cada1f7dV = cada1td1;
cada1f7 = e.f - a.f;
cada1tf1 = cada1f7(:,Gator1Data.Index13);
cada1td1 = cada1tf1.*cada1f6dV;
cada1tf1 = cada1f6(:,Gator1Data.Index14);
cada1td1 = cada1td1 + cada1tf1.*cada1f7dV;
dadt.dV = cada1td1;
dadt.f = cada1f6.*cada1f7;
%User Line: dadt = (d1.*(f+0.5) + d2.*(-f+0.5)).*(e-a);
end
function [err,FT] = ADiGator_ForceEquilibrium_FtildeState(a,fse,dfse,lMT,vMT,params,Fvparam,Fpparam,Faparam,Atendon)
global ADiGator_musdynContinous_FtildeStateADiGatorGrd
Gator1Data = ADiGator_musdynContinous_FtildeStateADiGatorGrd.ADiGator_ForceEquilibrium_FtildeState.Gator1Data;
% ADiGator Start Derivative Computations
cada1f1 = size(a.f,1);
cada1f2 = ones(cada1f1,1);
cada1f3 = params(1,:);
FMo.f = cada1f2*cada1f3;
%User Line: FMo = ones(size(a,1),1)*params(1,:);
cada1f1 = size(a.f,1);
cada1f2 = ones(cada1f1,1);
cada1f3 = params(2,:);
lMo.f = cada1f2*cada1f3;
%User Line: lMo = ones(size(a,1),1)*params(2,:);
cada1f1 = size(a.f,1);
cada1f2 = ones(cada1f1,1);
cada1f3 = params(3,:);
lTs.f = cada1f2*cada1f3;
%User Line: lTs = ones(size(a,1),1)*params(3,:);
cada1f1 = size(a.f,1);
cada1f2 = ones(cada1f1,1);
cada1f3 = params(4,:);
alphao.f = cada1f2*cada1f3;
%User Line: alphao = ones(size(a,1),1)*params(4,:);
cada1f1 = size(a.f,1);
cada1f2 = ones(cada1f1,1);
cada1f3 = params(5,:);
vMmax.f = cada1f2*cada1f3;
%User Line: vMmax = ones(size(a,1),1)*params(5,:);
cada1f1 = size(a.f,1);
cada1f2 = ones(cada1f1,1);
Atendon = cada1f2*Atendon;
%User Line: Atendon = ones(size(a,1),1)*Atendon;
%User Line: % Inverse tendon force-length characteristic
cada1f1dV = fse.dV;
cada1f1 = fse.f + 0.25;
cada1f2dV = 5.*cada1f1dV;
cada1f2 = 5*cada1f1;
cada1f3dV = 1./cada1f2.*cada1f2dV;
cada1f3 = log(cada1f2);
cada1f4dV = cada1f3dV./Atendon;
cada1f4 = cada1f3./Atendon;
lTtilde.dV = cada1f4dV;
lTtilde.f = cada1f4 + 0.995;
%User Line: lTtilde = log(5*(fse + 0.25))./Atendon + 0.995;
%User Line: % Hill-type muscle model: geometric relationships
cada1f1 = sin(alphao.f);
cada1f2 = lMo.f.*cada1f1;
cada1f3 = cada1f2.^2;
cada1f4dV = lTs.f.*lTtilde.dV;
cada1f4 = lTs.f.*lTtilde.f;
cada1f5dV = -cada1f4dV;
cada1f5 = lMT - cada1f4;
cada1f6dV = 2.*cada1f5.^(2-1).*cada1f5dV;
cada1f6 = cada1f5.^2;
cada1f7dV = cada1f6dV;
cada1f7 = cada1f3 + cada1f6;
lM.dV = (1/2)./sqrt(cada1f7).*cada1f7dV;
lM.dV(cada1f7 == 0 & cada1f7dV == 0) = 0;
lM.f = sqrt(cada1f7);
%User Line: lM = sqrt((lMo.*sin(alphao)).^2+(lMT-lTs.*lTtilde).^2);
lMtilde.dV = lM.dV./lMo.f;
lMtilde.f = lM.f./lMo.f;
%User Line: lMtilde = lM./lMo;
%User Line: % Active muscle force-length characteristic
b11.f = Faparam(1);
%User Line: b11 = Faparam(1);
b21.f = Faparam(2);
%User Line: b21 = Faparam(2);
b31.f = Faparam(3);
%User Line: b31 = Faparam(3);
b41.f = Faparam(4);
%User Line: b41 = Faparam(4);
b12.f = Faparam(5);
%User Line: b12 = Faparam(5);
b22.f = Faparam(6);
%User Line: b22 = Faparam(6);
b32.f = Faparam(7);
%User Line: b32 = Faparam(7);
b42.f = Faparam(8);
%User Line: b42 = Faparam(8);
b13.f =  0.1;
%User Line: b13 = 0.1;
b23.f =  1;
%User Line: b23 = 1;
b33.f =  0.5*sqrt(0.5);
%User Line: b33 = 0.5*sqrt(0.5);
b43.f =  0;
%User Line: b43 = 0;
num3.dV = lMtilde.dV;
num3.f = lMtilde.f - b23.f;
%User Line: num3 = lMtilde-b23;
cada1f1 = b43.f*lMtilde.f;
den3.f = b33.f + cada1f1;
%User Line: den3 = b33+b43*lMtilde;
cada1f1dV = 2.*num3.f.^(2-1).*num3.dV;
cada1f1 = num3.f.^2;
cada1f2dV = -0.5.*cada1f1dV;
cada1f2 = -0.5*cada1f1;
cada1f3 = den3.f.^2;
cada1f4dV = cada1f2dV./cada1f3;
cada1f4 = cada1f2./cada1f3;
cada1f5dV = exp(cada1f4).*cada1f4dV;
cada1f5 = exp(cada1f4);
FMtilde3.dV = b13.f.*cada1f5dV;
FMtilde3.f = b13.f*cada1f5;
%User Line: FMtilde3 = b13*exp(-0.5*num3.^2./den3.^2);
num1.dV = lMtilde.dV;
num1.f = lMtilde.f - b21.f;
%User Line: num1 = lMtilde-b21;
cada1f1dV = b41.f.*lMtilde.dV;
cada1f1 = b41.f*lMtilde.f;
den1.dV = cada1f1dV;
den1.f = b31.f + cada1f1;
%User Line: den1 = b31+b41*lMtilde;
cada1f1dV = 2.*num1.f.^(2-1).*num1.dV;
cada1f1 = num1.f.^2;
cada1f2dV = -0.5.*cada1f1dV;
cada1f2 = -0.5*cada1f1;
cada1f3dV = 2.*den1.f.^(2-1).*den1.dV;
cada1f3 = den1.f.^2;
cada1td1 = cada1f2dV./cada1f3;
cada1td1 = cada1td1 + -cada1f2./cada1f3.^2.*cada1f3dV;
cada1f4dV = cada1td1;
cada1f4 = cada1f2./cada1f3;
cada1f5dV = exp(cada1f4).*cada1f4dV;
cada1f5 = exp(cada1f4);
FMtilde1.dV = b11.f.*cada1f5dV;
FMtilde1.f = b11.f*cada1f5;
%User Line: FMtilde1 = b11*exp(-0.5*num1.^2./den1.^2);
num2.dV = lMtilde.dV;
num2.f = lMtilde.f - b22.f;
%User Line: num2 = lMtilde-b22;
cada1f1dV = b42.f.*lMtilde.dV;
cada1f1 = b42.f*lMtilde.f;
den2.dV = cada1f1dV;
den2.f = b32.f + cada1f1;
%User Line: den2 = b32+b42*lMtilde;
cada1f1dV = 2.*num2.f.^(2-1).*num2.dV;
cada1f1 = num2.f.^2;
cada1f2dV = -0.5.*cada1f1dV;
cada1f2 = -0.5*cada1f1;
cada1f3dV = 2.*den2.f.^(2-1).*den2.dV;
cada1f3 = den2.f.^2;
cada1td1 = cada1f2dV./cada1f3;
cada1td1 = cada1td1 + -cada1f2./cada1f3.^2.*cada1f3dV;
cada1f4dV = cada1td1;
cada1f4 = cada1f2./cada1f3;
cada1f5dV = exp(cada1f4).*cada1f4dV;
cada1f5 = exp(cada1f4);
FMtilde2.dV = b12.f.*cada1f5dV;
FMtilde2.f = b12.f*cada1f5;
%User Line: FMtilde2 = b12*exp(-0.5*num2.^2./den2.^2);
cada1td1 = FMtilde1.dV;
cada1td1 = cada1td1 + FMtilde2.dV;
cada1f1dV = cada1td1;
cada1f1 = FMtilde1.f + FMtilde2.f;
cada1td1 = cada1f1dV;
cada1td1 = cada1td1 + FMtilde3.dV;
FMltilde.dV = cada1td1;
FMltilde.f = cada1f1 + FMtilde3.f;
%User Line: FMltilde = FMtilde1+FMtilde2+FMtilde3;
%User Line: % Active muscle force-velocity characteristic
cada1f1dV = lTs.f.*dfse.dV;
cada1f1 = lTs.f.*dfse.f;
cada1f2dV = lTtilde.dV;
cada1f2 = lTtilde.f - 0.995;
cada1f3dV = 35.*cada1f2dV;
cada1f3 = 35*cada1f2;
cada1f4dV = exp(cada1f3).*cada1f3dV;
cada1f4 = exp(cada1f3);
cada1f5dV = 7.*cada1f4dV;
cada1f5 = 7*cada1f4;
cada1td1 = zeros(size(cada1f1dV,1),18);
cada1td1(:,Gator1Data.Index1) = cada1f1dV./cada1f5;
cada1td1(:,Gator1Data.Index2) = cada1td1(:,Gator1Data.Index2) + -cada1f1./cada1f5.^2.*cada1f5dV;
vT.dV = cada1td1;
vT.f = cada1f1./cada1f5;
%User Line: vT = lTs.*dfse./(7*exp(35*(lTtilde-0.995)));
cada1f1dV = lTs.f.*lTtilde.dV;
cada1f1 = lTs.f.*lTtilde.f;
cada1f2dV = -cada1f1dV;
cada1f2 = lMT - cada1f1;
cada1td1 = cada1f2dV./lM.f;
cada1td1 = cada1td1 + -cada1f2./lM.f.^2.*lM.dV;
cos_alpha.dV = cada1td1;
cos_alpha.f = cada1f2./lM.f;
%User Line: cos_alpha = (lMT-lTs.*lTtilde)./lM;
cada1f1dV = -vT.dV;
cada1f1 = vMT - vT.f;
cada1tf1 = cos_alpha.f(:,Gator1Data.Index3);
cada1td1 = cada1tf1.*cada1f1dV;
cada1td1(:,Gator1Data.Index4) = cada1td1(:,Gator1Data.Index4) + cada1f1.*cos_alpha.dV;
vM.dV = cada1td1;
vM.f = cada1f1.*cos_alpha.f;
%User Line: vM = (vMT-vT).*cos_alpha;
cada1tf1 = vMmax.f(:,Gator1Data.Index5);
vMtilde.dV = vM.dV./cada1tf1;
vMtilde.f = vM.f./vMmax.f;
%User Line: vMtilde = vM./vMmax;
e1.f = Fvparam(1);
%User Line: e1 = Fvparam(1);
e2.f = Fvparam(2);
%User Line: e2 = Fvparam(2);
e3.f = Fvparam(3);
%User Line: e3 = Fvparam(3);
e4.f = Fvparam(4);
%User Line: e4 = Fvparam(4);
cada1f1dV = e2.f.*vMtilde.dV;
cada1f1 = e2.f*vMtilde.f;
cada1f2dV = cada1f1dV;
cada1f2 = cada1f1 + e3.f;
cada1f3dV = e2.f.*vMtilde.dV;
cada1f3 = e2.f*vMtilde.f;
cada1f4dV = cada1f3dV;
cada1f4 = cada1f3 + e3.f;
cada1tf2 = cada1f4(:,Gator1Data.Index6);
cada1f5dV = 2.*cada1tf2.^(2-1).*cada1f4dV;
cada1f5 = cada1f4.^2;
cada1f6dV = cada1f5dV;
cada1f6 = cada1f5 + 1;
cada1tf1 = cada1f6(:,Gator1Data.Index7);
cada1f7dV = (1/2)./sqrt(cada1tf1).*cada1f6dV;
cada1f7dV(cada1tf1 == 0 & cada1f6dV == 0) = 0;
cada1f7 = sqrt(cada1f6);
cada1td1 = cada1f2dV;
cada1td1 = cada1td1 + cada1f7dV;
cada1f8dV = cada1td1;
cada1f8 = cada1f2 + cada1f7;
cada1tf1 = cada1f8(:,Gator1Data.Index8);
cada1f9dV = 1./cada1tf1.*cada1f8dV;
cada1f9 = log(cada1f8);
cada1f10dV = e1.f.*cada1f9dV;
cada1f10 = e1.f*cada1f9;
FMvtilde.dV = cada1f10dV;
FMvtilde.f = cada1f10 + e4.f;
%User Line: FMvtilde = e1*log((e2*vMtilde+e3)+sqrt((e2*vMtilde+e3).^2+1))+e4;
%User Line: % Active muscle force
cada1td1 = zeros(size(a.dV,1),18);
cada1td1(:,Gator1Data.Index9) = FMltilde.f.*a.dV;
cada1td1(:,Gator1Data.Index10) = cada1td1(:,Gator1Data.Index10) + a.f.*FMltilde.dV;
cada1f1dV = cada1td1;
cada1f1 = a.f.*FMltilde.f;
cada1tf1 = FMvtilde.f(:,Gator1Data.Index11);
cada1td1 = zeros(size(cada1f1dV,1),27);
cada1td1(:,Gator1Data.Index12) = cada1tf1.*cada1f1dV;
cada1tf1 = cada1f1(:,Gator1Data.Index13);
cada1td1(:,Gator1Data.Index14) = cada1td1(:,Gator1Data.Index14) + cada1tf1.*FMvtilde.dV;
Fce.dV = cada1td1;
Fce.f = cada1f1.*FMvtilde.f;
%User Line: Fce = a.*FMltilde.*FMvtilde;
%User Line: % Passive muscle force-length characteristic
e0.f =  0.6;
%User Line: e0 = 0.6;
kpe.f =  4;
%User Line: kpe = 4;
cada1f1dV = lMtilde.dV;
cada1f1 = lMtilde.f - 1;
cada1f2dV = kpe.f.*cada1f1dV;
cada1f2 = kpe.f*cada1f1;
cada1f3dV = cada1f2dV./e0.f;
cada1f3 = cada1f2/e0.f;
t5.dV = exp(cada1f3).*cada1f3dV;
t5.f = exp(cada1f3);
%User Line: t5 = exp(kpe * (lMtilde - 0.10e1) / e0);
cada1f1dV = t5.dV;
cada1f1 = t5.f - 1;
cada1f2 = Fpparam(1);
cada1f3dV = cada1f1dV;
cada1f3 = cada1f1 - cada1f2;
cada1f4 = Fpparam(2);
Fpe.dV = cada1f3dV./cada1f4;
Fpe.f = cada1f3/cada1f4;
%User Line: Fpe = ((t5 - 0.10e1) - Fpparam(1)) / Fpparam(2);
%User Line: % Muscle force
cada1td1 = Fce.dV;
cada1td1(:,Gator1Data.Index15) = cada1td1(:,Gator1Data.Index15) + Fpe.dV;
cada1f1dV = cada1td1;
cada1f1 = Fce.f + Fpe.f;
cada1tf1 = FMo.f(:,Gator1Data.Index16);
FM.dV = cada1tf1.*cada1f1dV;
FM.f = FMo.f.*cada1f1;
%User Line: FM = FMo.*(Fce+Fpe);
%User Line: % Tendon force
FT.dV = FMo.f.*fse.dV;
FT.f = fse.f.*FMo.f;
%User Line: FT = fse .* FMo;
%User Line: % Equilibrium between muscle and tendon forces
%User Line: % Fm*cos(alpha) = Ft
cada1tf1 = cos_alpha.f(:,Gator1Data.Index17);
cada1td1 = cada1tf1.*FM.dV;
cada1td1(:,Gator1Data.Index18) = cada1td1(:,Gator1Data.Index18) + FM.f.*cos_alpha.dV;
cada1f1dV = cada1td1;
cada1f1 = FM.f.*cos_alpha.f;
cada1td1 = cada1f1dV;
cada1td1(:,Gator1Data.Index19) = cada1td1(:,Gator1Data.Index19) + -FT.dV;
err.dV = cada1td1;
err.f = cada1f1 - FT.f;
%User Line: err =  FM.*cos_alpha-FT;
end


function ADiGator_LoadData()
global ADiGator_musdynContinous_FtildeStateADiGatorGrd
ADiGator_musdynContinous_FtildeStateADiGatorGrd = load('musdynContinous_FtildeStateADiGatorGrd.mat');
return
end